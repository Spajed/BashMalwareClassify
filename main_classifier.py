import argparse
from slp import ShellTokenizer
import re
from pathlib import Path
import pickle as pckl
import yara
import codecs

def predict_file (file_path : str) -> bool:
    
    with open("TFIDF_transformer.pckl", "rb") as f:
        tf_idf_aug = pckl.loads(f.read())
    with open("NMF_transformer.pckl", "rb") as f:
        nmf_tfidf_aug = pckl.loads(f.read())
    with open("XGB_model.pckl", "rb") as f:
        best_xgb_tfidf_aug = pckl.loads(f.read())
    with open("KNN_model.pckl", "rb") as f:
        best_knn_tfidf_aug = pckl.loads(f.read())
    def identity_tokenizer(text):
        return text
    tf_idf_aug.tokenizer = identity_tokenizer
    with open("./yargen_rules.yar","r") as f:
        yara_rules =  yara.compile(file=f)


    with codecs.open(file_path, "r",encoding='utf-8',
                 errors='ignore') as f:
        sample_to_test = f.read()

    filtered_sample = re.sub(r'[^\s -~]+', '', sample_to_test)
    filtered_sample = re.sub(r'#.*\n', '', filtered_sample)

    tokenizer = ShellTokenizer()
    sample_tokenized = tokenizer.tokenize([filtered_sample])[0]
    sample_tokenized = [list(filter(None, map(lambda y: y.strip(), sample_tokenized[0])))]

    if sample_tokenized == []:
        return any(yara_rules.match(data=sample_to_test))
    
    tfidf = tf_idf_aug.transform(sample_tokenized)
    nmf = nmf_tfidf_aug.transform(tfidf)
    
    pred_prob1 = best_xgb_tfidf_aug.predict_proba(nmf)[0][1]
    if pred_prob1 >= 0.95:
        return True
    if pred_prob1 >= 0.5:
        pred_prob2 = best_knn_tfidf_aug.predict_proba(nmf)[0][1]
        if pred_prob2 >= 0.95:
            return True
    if pred_prob1 >= 0.25:
        return any(yara_rules.match(data=sample_to_test))
    return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", required=True ,type=Path,
                        help="Path to bash script to process")
    args = parser.parse_args()

    if not args.file.exists() or not args.file.is_file():
        raise ValueError("File path is not valid")

    full_path = args.file.absolute()
    full_path = full_path.as_posix()
    if predict_file(full_path):
        print("Malicious!")
    else:
        print("Benign!")